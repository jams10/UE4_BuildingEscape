1. Inheritance(상속)는(은) "is a" 관계. ex) Character "is a" Pawn, Pawn "is an" Actor.
   Component는 "has a" 관계.

2. Component는 공통의 행동, 기능을 공유하는 데 사용함.

3. 작업물을 보호하기 위해 창-프로젝트 세팅의 법률고지 부분에 저작권 관련 표시를 해둘 것.

4. 커스텀 C++ 컴포넌트를 생성했을 때, 해당 컴포넌트 헤더 파일의 #include 지시문 중 
   제일 마지막이 "컴포넌트 이름.generated.h" 가 되도록 순서를 구성해야 함.

5. 해당 컴포넌트의 생성자에서 프레임마다 호출되는 TickComponent가 필요 없다면, 
   퍼포먼스를 위해 PrimaryComponentTick.bCanEverTick 변수 값을 false로 설정하면 된다.

6. 커스텀 클래스 지우기
   지우고 싶은 클래스에 대해 프로젝트에 해당 클래스가 컴포넌트로 붙어있지 않아야 함. (오브젝트에 붙어있을 경우 다 지울 것.)
   그 후에 Binaries 폴더에서 해당 파일을 지우고 Binaries 폴더 자체를 지우면 프로젝트를 다시 켰을 때 리빌딩 되서 제거된 상태로 돌아옴.

7. Unreal output log (디버그용 로그 출력)

   UE_LOG( Category, Verbosity, TEXT("text is here"));
   ex) UE_LOG( LogTemp, Warning, TEXT("text is here")); // Error : 빨강, Warning : 노랑, Display : 회색

8. UE_LOG 출력 포맷

   FString Log = TEXT("Hello!");		         // FString : 언리얼에서 기본적으로 사용되는 문자열 클래스.
   UE_LOG(LogTemp, Warning, TEXT("%s"), *Log);        // UE_LOG의 경우 TCHAR 타입을 원함. *를 사용해 string을 TCHAR 타입으로 바꿀 수 있음.

   포인터 쓸 경우 
   FString* PtLog = &Log;
   UE_LOG(LogTemp, Warning, TEXT("%s"), **PtLog);  

9. GetActorTransform
   해당 함수는 Location | Rotation | Scale 순의 포맷으로 데이터를 리턴함.

10. 프로젝트 내 파일 이동 시 절대 엔진 외부의 파일 익스플로러 창에서 옮기지 말 것. -> 해당 파일에 대한 레퍼런스를 잃어버릴 수 있음.

11. 모델들을 레벨에 배치할 때 해당 모델들이 결합하기 적절하게 모델링이 되었다면 shift + 클릭으로 한번에 배치할 수 있음.
    (문 프레임과 문 같은 경우)

12. Modular asset에서 발생하는 라이팅 문제 
     https://forums.unrealengine.com/development-discussion/content-creation/18356-modular-asset-lighting-problem?46269-Modular-Asset-Lighting-Problem=