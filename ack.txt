1. Inheritance(상속)는(은) "is a" 관계. ex) Character "is a" Pawn, Pawn "is an" Actor.
   Component는 "has a" 관계.

2. Component는 공통의 행동, 기능을 공유하는 데 사용함.

3. 작업물을 보호하기 위해 창-프로젝트 세팅의 법률고지 부분에 저작권 관련 표시를 해둘 것.

4. 커스텀 C++ 컴포넌트를 생성했을 때, 해당 컴포넌트 헤더 파일의 #include 지시문 중 
   제일 마지막이 "컴포넌트 이름.generated.h" 가 되도록 순서를 구성해야 함.

5. 해당 컴포넌트의 생성자에서 프레임마다 호출되는 TickComponent가 필요 없다면, 
   퍼포먼스를 위해 PrimaryComponentTick.bCanEverTick 변수 값을 false로 설정하면 된다.

6. 커스텀 클래스 지우기
   지우고 싶은 클래스에 대해 프로젝트에 해당 클래스가 컴포넌트로 붙어있지 않아야 함. (오브젝트에 붙어있을 경우 다 지울 것.)
   그 후에 Binaries 폴더에서 해당 파일을 지우고 Binaries 폴더 자체를 지우면 프로젝트를 다시 켰을 때 리빌딩 되서 제거된 상태로 돌아옴.

7. Unreal output log (디버그용 로그 출력)

   UE_LOG( Category, Verbosity, TEXT("text is here"));
   ex) UE_LOG( LogTemp, Warning, TEXT("text is here")); // Error : 빨강, Warning : 노랑, Display : 회색

8. UE_LOG 출력 포맷

   FString Log = TEXT("Hello!");		         // FString : 언리얼에서 기본적으로 사용되는 문자열 클래스.
   UE_LOG(LogTemp, Warning, TEXT("%s"), *Log);        // UE_LOG의 경우 TCHAR 타입을 원함. *를 사용해 string을 TCHAR 타입으로 바꿀 수 있음.

   포인터 쓸 경우 
   FString* PtLog = &Log;
   UE_LOG(LogTemp, Warning, TEXT("%s"), **PtLog);  

9. GetActorTransform
   해당 함수는 Location | Rotation | Scale 순의 포맷으로 데이터를 리턴함.

10. 프로젝트 내 파일 이동 시 절대 엔진 외부의 파일 익스플로러 창에서 옮기지 말 것. -> 해당 파일에 대한 레퍼런스를 잃어버릴 수 있음.

11. 모델들을 레벨에 배치할 때 해당 모델들이 결합하기 적절하게 모델링이 되었다면 shift + 클릭으로 한번에 배치할 수 있음.
    (문 프레임과 문 같은 경우)

12. Modular asset에서 발생하는 라이팅 문제 
     https://forums.unrealengine.com/development-discussion/content-creation/18356-modular-asset-lighting-problem?46269-Modular-Asset-Lighting-Problem=

13. Material Texture Scale 조정
     Texture Sample의 UV 에 Texture Coordinate, Scalar Parameter를 Multiply 노드를 통해 연결. 인스턴스 만들어서 오브젝트 마다 따로 지정 가능.

     수직, 수평 스케일을 각각 따로 조정하고 싶은 경우에 ScalarParameter를 두개 생성하여 AppendVector 노드로 합치고 이를 TexCoord와 Multiply.

14. AppendVector
     AppendVector (벡터 덧붙이기) 표현식은 채널을 합쳐 원래보다 채널 수가 많은 벡터를 만들 수 있음.
     예를 들어 두 개의 Constant 값을 덧붙이면 Constant2Vector 값을 만들 수 있음.

     https://docs.unrealengine.com/ko/Engine/Rendering/Materials/ExpressionReference/VectorOps/index.html#appendvector

15. Implicitly Conversion
    언리얼의 경우 코드 작성 시 알아서 형변환 해줌. 
    
    ex) float MyFloat = 10; // int -> float	float MyFloat = 10.0; // double -> float	float MyFloat = 10.0f; // float

16. FRotator
     Pitch(y축), Roll(x축), Yaw(z축) 으로 구성된 구조체

17. Low poly collision 만들기
     BSP를 이용, 해당 오브젝트를 감싼다.(collision을 넣을 부분) 그 후에 coliision 설정창에서 simple collision 추가 후에 collision complexity를 
     Use complex collision as simple로 선택함.

18. Lerp
    선형보간 - Linear Interpolation 또는 Lerp 는 알파 입력에 따라 A 와 B 입력을 블렌딩한 결과를 반환.
    주어진 예제에서 알파가 0 일 때, A 가 100% 반환. 알파가 1 이면, B 가 100% 반환.
   
    따라서, Lerping이 타켓 값에 가까워질수록 느려지는 이유는 증가하는 작은 값에 대해 고정된 비율을 취하기 때문.

19. C++ 컴포넌트 상의 코드 변수를 언리얼 에디터에 파라미터로 넘기는 방법.

     넘기고 싶은 변수 바로 위에 UPROPERTY( EditAnywhere ) 를 적어줌.
     이렇게 파라미터를 넘겨서 각 오브젝트 마다 파라미터 값을 달리하여 다른 동작을 하게 만들 수 있음.

20. GetOwner()와 GetWorld()
     
    GetOwner() 함수는 bottom-up 방식의 search, GetWorld() 함수는 top-down 방식의 search
    
21. Default Pawn은 player의 몸. 일시적임(transient)
     Player Controller는 player의 정신. 지속적임(persist) 

    -> 이러한 구조로 Player Controller 클래스는 GetPawn() 함수를 가지고 있음.

22. 코드 블록 선택 후 위아래로 한꺼번에 이동 -> 여러 코드블록 선택 후 alt+방향키

23. GameMode
     - 시작 시에 플레이어가 어떤 아이템을 들고 시작하는 지.
     - 목숨이 얼마나 많은지.
     - 시간 제한.
     - 게임 종료 조건 점수
     이 모든 것들이 GameMode에서 결정됨.

24. 월드 아웃라이너 탭에서 오브젝트 선택후 블루프린트 - select to blueprint로 블루프린트 클래스 만들 수 있음.
     유니티에서의 프리팹 개념과 비슷.

25. 프로젝트 세팅에서 Default GameMode를 변경하면 GameMode 탭에 있는 Default Pawn 지정 등 여러 세팅들을 바꿀 수 있다.
     이때, 커스텀 GameMode는 GameMode C++ 파생 클래스 혹은 블루프린트로 제작할 수 있다.

26. GetPlayerViewPoint 함수
     AI의 경우 Pawn의 눈에 해당하는 뷰 포인트. Human 플레이어의 경우 카메라의 뷰 포인트 리턴.\

27. #define OUT 으로 참조 매개변수로 값을 전달하는 함수에 대해 알기 쉽게 매개변수 표현하기
     함수(int& out_value)의 경우 매개변수를 넘길 때 함수(OUT value)로 넘겨 해당 함수가 참조를 통해 값을 전달하고 있음을 쉽게 확인할 수 있음.

28. 에디터의 PlayerCollision 뷰모드로 레벨에 존재하는 오브젝트들의 콜리전 타입을 확인함으로써 빠뜨린 부분이나 잘못설정한 부분들을 
     한눈에 파악할 수 있다.

29. GetTimeSeconds의 경우 플레이 시작 부터 현재 까지의 시간을 리턴함. 게임이 중단될 경우 카운팅도 중단됨.

30. FCollisionQueryParams
     (
	FName InTraceTag,               // 콜리전 체크 시에 사용하는 tag. ECollisionChannel을 사용하면 이 부분은 필요 없음.
	bool bInTraceComplex,          // complex collision을 사용하는가.
	const AActor * InIgnoreActor  // 무시할 actor. line이 플레이어 pawn에서 나오는데 이때 라인의 일부분이 pawn 3D 오브젝트와
                                                     clipping 되므로, 콜리전 체크시에 계속해서 체크될 수 있음. 이를 위해 이 부분에 플레이어 Pawn 할당.
     )

31. Physics Handle
    피지컬 오브젝트를 움직이는 유틸리티 오브젝트 컴포넌트

32. UInputComponent의 경우, 숨겨져 있음. Physics Handle 처럼 블루프린트에 컴포넌트로 추가해주지 않아도 됨. -> 그러나 nullptr 체크는 반드시 할 것.

33. hot loop : 호출이 자주 일어나는 코드. TickComponent 처럼 매 프레임마다 호출 되는 코드.
    이 부분은 매 프레임마다 계속해서 호출되므로, 이 속에 있는 코드들들 줄이는 것이 성능적으로 좋다.
    물체를 집는 Grabber 클래스에서 레이 캐스트를 통해 물체를 판단하는 연산은 Grab 키를 눌렀을 때만 작동 되도록 하는게 매 프레임마다
    호출하여 계속해서 판단하는 것 보다 훨씬 효율적이다.

34. Player가 하늘에 둥둥떠다니는걸 막고 싶으면, Player Pawn에 해당하는 블루프린트에서 먼저 eye heigth를 알맞게 설정하고,
    Collision Component에서 Simulate Physics로 무게를 주고 Enable Gravity로 중력 적용받게 해주자.
    여기에 점프를 하거나 위로 조금의 이동마저 제한하고 싶으면 Constraint로 Z축 이동을 잠궈주면 된다.
    
35. Movable 엑터에 대해 트리거 볼륨과 Overlap 되었을 때 특정 이벤트를 발생시키고 싶으면, 해당 엑터의 콜리전 옵션에서
    Generate Overlap Event를 켜주어야 한다.

36. 충돌 시에 Player Pawn이 계속해서 미끄러지는 현상. -> CollisionComponent 속성에서 Linear Dampling을 10으로 설정해 제동력을 주어 해결.

37. 포인터 선언시 반드시 nullptr로 초기화 할 것. 그리고 포인터를 활용한 함수 호출이나 관련 작업시 항상 nullptr 체크를 해주어야 함.